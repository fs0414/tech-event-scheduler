// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id         String   @id @default(uuid())
  supabaseId String   @unique @map("supabase_id")
  email      String   @unique
  name       String?
  avatarUrl  String?  @map("avatar_url")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // リレーション
  ownerEvents Owner[]
  speakers    Speaker[]

  @@map("users")
}

model Event {
  id         Int      @id @default(autoincrement())
  title      String
  eventUrl   String?  @map("event_url")
  attendance Int      @default(0)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)

  owners   Owner[]
  speakers Speaker[]
  timers   Timer[]

  @@map("events")
}

model Owner {
  id        Int      @id @default(autoincrement())
  userId    String   @map("user_id")
  eventId   Int      @map("event_id")
  role      Int      @default(10) // 10=管理者, 20=メンバー
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@map("owners")
}

model Article {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  url         String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)

  speakers Speaker[]

  @@map("articles")
}

model Speaker {
  id        Int      @id @default(autoincrement())
  userId    String   @map("user_id")
  eventId   Int      @map("event_id")
  articleId Int?     @map("article_id")
  role      String?  @default("speaker")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  event   Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  article Article? @relation(fields: [articleId], references: [id], onDelete: SetNull)

  @@unique([userId, eventId])
  @@map("speakers")
}

model Timer {
  id              Int      @id @default(autoincrement())
  durationMinutes Int      @map("duration_minutes")
  sequence        Int
  eventId         Int      @map("event_id")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([eventId, sequence])
  @@map("timers")
}
